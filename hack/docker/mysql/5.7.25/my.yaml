apiVersion: v1
data:
  password: dVd1ajctZGJ2ZWZaVm5KeA==
  username: cm9vdA==
kind: Secret
metadata:
  labels:
    kubedb.com/kind: MySQL
    kubedb.com/name: my-galera
  name: my-galera-auth
  namespace: demo
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: kubedb-gvr
  namespace: demo
spec:
  selector:
    kubedb.com/kind: MySQL
    kubedb.com/name: my-galera
  ports:
    - port: 3306
  type: ClusterIP
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: my-galera
    app.kubernetes.io/managed-by: kubedb.com
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0-v2
    kubedb.com/kind: MySQL
    kubedb.com/name: my-galera
  name: my-galera
  namespace: demo
spec:
  podManagementPolicy: OrderedReady
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      kubedb.com/kind: MySQL
      kubedb.com/name: my-galera
#  serviceName: kubedb
  serviceName: kubedb-gvr
  template:
    metadata:
      labels:
        kubedb.com/kind: MySQL
        kubedb.com/name: my-galera
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: my-galera-auth
        - name: MYSQL_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: my-galera-auth
        - name: GROUP_SIZE
          value: "4"
        - name: BASE_NAME
          value: "my-galera"
        - name: GOV_SVC
          value: "kubedb-gvr"
        - name: NAMESPACE
          value: "demo"
        - name: GROUP_NAME
          value: "67e110ec-d3d7-4cb8-a192-13ddad17dcc7"
#        image: mysql:8.0.15
#        image: mysql:8.0.14
#        image: mysql:5.7.25
#        image: mysql:5.7.17
#        image: mysql:5.7.21
        image: alittleprogramming/mysql:group-test1
        imagePullPolicy: IfNotPresent
#        imagePullPolicy: Always
        name: mysql
#        command:
#          - bash
#          - -c
#          - |
#            apt-get update
#            apt-get install nano
#            while true; do
#              sleep 1
#              echo .
#            done
        ports:
        - containerPort: 3306
          name: db
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - rm
        - -rf
        - /var/lib/mysql/lost+found
        image: kubedb/busybox
        imagePullPolicy: IfNotPresent
        name: remove-lost-found
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: standard
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
      volumeMode: Filesystem
